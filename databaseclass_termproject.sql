-- Use this template for your se2222 term project
-- Before submission be sure that your file is named like [your_ID].sql
-- Name: İREM FOÇALI
-- ID: 18070006032
-- Short description of your scenario:...

-- WELCOME TO REVERIE DESSERT DATABASE. THERE ARE WORKERS WORKING IN THE PASTRY AND SOME OF THESE WORKERS ARE PROFESSIONAL PASTRY CHEFS.
-- EVERY PROFESSIONAL PASTRY CHIEF HAS A NICKNAME AND THEIR  PROFESSIONAL DESSERT AREA. THESE DESSERTS HAVE THE SIGNATURES OF THE CHEFS WHILE SERVING.
-- I HAVE VARIOUS DESSERTS AND VARIOUS BEVERAGES IN MY PASTRY.
-- THE INFORMATION OF CUSTOMERS SHOPPING FROM THE PASTRY IS KEPT IN RECORDS AND EACH CUSTOMER HAS A BASKET.
-- CUSTOMERS CAN ORDER THE PRODUCTS AT THE DOOR. THERE ARE VARIOUS PAYMENT OPTIONS.

-- 1. Create and use a schema for your project named SE2222_[your_ID]
CREATE SCHEMA SE2222_18070006032;
USE SE2222_18070006032;
-- 1. Definitiemployeeons:
-- (15 points)
-- All table definitions of your project including any constraints
-- Before each table creation give a short explanation of the table

-- EMPLOYEE TABLE HOLDS EMPLOYEES IN THE PATISSERIE
CREATE TABLE EMPLOYEE(
EMPNO INT PRIMARY KEY, 
FİRSTNAME VARCHAR(50) NOT NULL , 
LASTNAME VARCHAR(50) NOT NULL,
AGE INT(2) NOT NULL, 
GENDER VARCHAR(2) NOT NULL,
SALARY INT(10) NOT NULL
);

-- PROFESSIONALPASTRYCHEFS TABLE HOLDS PROFESSIONAL PASTRY CHEFS IN THE PATISSERIE
CREATE TABLE PROFESSIONALPASTRYCHEFS(
EMPNO INT,
NICKNAMEFORCHEF VARCHAR(50) PRIMARY KEY,
PROFESSIONAREA VARCHAR(50) NOT NULL,
EXPERIENCE INT(2) NOT NULL,
CONSTRAINT EMPNO_FK FOREIGN KEY (EMPNO) REFERENCES EMPLOYEE(EMPNO)
);

-- PRODUCTS TABLE HOLDS PRODUCTS IN THE PATISSERIE AND HOLDS THE NAME OF THE PASTRY CHEF WHO MADE THE PRODUCT
CREATE TABLE PRODUCTS(
NICKNAMEFORCHEF VARCHAR(50),
PRODUCTNAME VARCHAR(50) PRIMARY KEY,
CONSTRAINT NICKNAMEFORCHEF_PK FOREIGN KEY (NICKNAMEFORCHEF) REFERENCES PROFESSIONALPASTRYCHEFS(NICKNAMEFORCHEF)
);

-- DESSERTS TABLE HOLDS DESSERTS PROPERTIES IN THE PATISSERIE
CREATE TABLE DESSERTS(
PRODUCTNAME VARCHAR(50),
DESSERT_OPTION VARCHAR(20) NOT NULL,
PORTION_SIZE_GR INT(20) NOT NULL, 
DESSERT_PRICE DOUBLE NOT NULL, 
ORIGINOF_DESSERT VARCHAR(50) NOT NULL,
NUTRITIONAL_VALUES VARCHAR(50) NOT NULL,
CONSTRAINT PRODUCTNAMEDESSERTS_PK FOREIGN KEY (PRODUCTNAME) REFERENCES PRODUCTS(PRODUCTNAME)
);

-- BEVERAGES TABLE HOLDS BEVERAGES PROPERTIES IN THE PATISSERIE
CREATE TABLE BEVERAGES(
PRODUCTNAME VARCHAR(50),
CUP_SIZE VARCHAR(50) NOT NULL,
SYRUP_OPTION VARCHAR(50) NOT NULL,
MILK_OPTION VARCHAR(50) NOT NULL,
BEVERAGE_PRICE INT(10) NOT NULL,
CONSTRAINT PRODUCTNAMEBEVERAGES_PK FOREIGN KEY (PRODUCTNAME) REFERENCES PRODUCTS(PRODUCTNAME)
);

-- BASKET TABLE HOLDS PRODUCTS AND THE PRICE OF THE PRODUCTS IN THE BASKET
CREATE TABLE BASKET(
BASKETID INT(5) PRIMARY KEY,
TOTAL_PRICE INT(10) NOT NULL
);

-- PAYMENT TABLE HOLDS THE INFORMATION REQUIRED AS A RESULT OF THE ORDER. 
-- FOR EXAMPLE, PAYMENT TYPE INCLUDE TWO OPTIONS SUCH AS CASH OR CREDIT CARD. 
-- SAME WAY PAYMENT PLACE INCLUDES TWO OPTIONS SUCH AS AT THE PATISSERIE OR PAY AT THE DOOR.
CREATE TABLE PAYMENT(
BASKETID INT(5),
PAYMENT_TYPE VARCHAR(50) NOT NULL,
PAYMENT_PLACE VARCHAR(50) NOT NULL,
CONSTRAINT BASKETID_PAYMENT_PK FOREIGN KEY (BASKETID) REFERENCES BASKET(BASKETID)
);

-- ADDRESS TABLE HOLDS ADDRESS INFORMATION FOR CUSTOMERS' HOME ORDERS.
CREATE TABLE ADDRESS(
ADDRESS_ID INT(5) PRIMARY KEY,
CITY VARCHAR(30) NOT NULL,
STATE VARCHAR(30) NOT NULL,
STREET_NAME VARCHAR(30) NOT NULL,
STREET_NO INT(10) NOT NULL,
APARTMENT_NAME VARCHAR(50) NOT NULL,
DOOR_NO INT(3) NOT NULL
);

-- MEMBERS TABLE HOLDS THE INFORMATION OF CUSTOMERS WHO SHOP FROM THE PATISSERIE.
CREATE TABLE MEMBERS(
BASKETID INT(5),
ADDRESS_ID INT(5),
USERNAME VARCHAR(30) UNIQUE,
PASSWORD VARCHAR(30) PRIMARY KEY,
PHONE_NUMBER VARCHAR(50) NOT NULL,
E_MAIL VARCHAR(50) NOT NULL,
CONSTRAINT BASKETID_MEMBERS_PK FOREIGN KEY (BASKETID) REFERENCES BASKET(BASKETID),
CONSTRAINT ADDRESS_ID_MEMBERS_PK FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);


-- 2. Insertions(Data manipulation):
-- (15 points)
-- For each table, add enough number of rows to make your queries in step three to produce meaningful result sets.

-- //EMPLOYEE TABLE;
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(1,"AYLA","SERT",25,"F",3200);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(2,"BERK","HAYLAZ",32,"M",2600);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(3,"UMUT","GÖRMÜŞ",28,"M",2800);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(4,"NECLA","EROL",30,"F",3200);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(5,"FİGEN","SAZ",35,"F",3500);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(6,"CENK","GAZİ",29,"M",3000);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(7,"HAZAL","BİÇER",31,"F",3900);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(8,"ŞEBNEM","ARAS",33,"F",4000);
INSERT INTO EMPLOYEE(EMPNO,FIRSTNAME,LASTNAME,AGE,GENDER,SALARY) VALUES(9,"EZGİ","ZAYIF",28,"F",4000);
SELECT * FROM EMPLOYEE;
DROP TABLE  EMPLOYEE;

-- // PROFESSIONALPASTRYCHEFS TABLE;
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(1,"AYLANIN_İMZASI","BROWNIE , COFFEE",3);
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(4,"NECLANIN_İMZASI","PROFITEROL , COOKIE",5);
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(5,"FİGENİN_İMZASI","CROISSANT",5);
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(7,"HAZALIN_İMZASI","CHEESECAKE , SOUFFLE",7);
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(8,"ŞEBNEMİN_İMZASI","SUPANGLE , ICECREAM",10);
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(6,"CENKİN_İMZASI","SHERBET , TEA , COCKTAIL",4);
INSERT INTO PROFESSIONALPASTRYCHEFS(EMPNO,NICKNAMEFORCHEF,PROFESSIONAREA,EXPERIENCE) VALUES(9,"EZGİNİN_İMZASI","FIT_BROWNIE , FIT_CHEESECAKE",5);
SELECT * FROM PROFESSIONALPASTRYCHEFS;
DROP TABLE PROFESSIONALPASTRYCHEFS;

-- // PRODUCTS TABLE;
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("AYLANIN_İMZASI","BROWNIE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("AYLANIN_İMZASI","COFFEE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("NECLANIN_İMZASI","PROFITEROL");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("NECLANIN_İMZASI","COOKIE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("FİGENİN_İMZASI","CROISSANT");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("HAZALIN_İMZASI","CHEESECAKE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("HAZALIN_İMZASI","SOUFFLE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("ŞEBNEMİN_İMZASI","SUPANGLE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("ŞEBNEMİN_İMZASI","ICECREAM");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("CENKİN_İMZASI","SHERBET");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("CENKİN_İMZASI","TEA");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("CENKİN_İMZASI","COCKTAIL");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("EZGİNİN_İMZASI","FIT_BROWNIE");
INSERT INTO PRODUCTS(NICKNAMEFORCHEF,PRODUCTNAME) VALUES("EZGİNİN_İMZASI","FIT_CHEESECAKE");
SELECT * FROM PRODUCTS;
DROP TABLE PRODUCTS;

-- //DESSERTS TABLE;
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("BROWNIE" ,"REGULAR" , 150, 20.5, "ABD","KCAL: 478, CARBOHYDRATE: 64.8GR, PROTEIN: 4.46GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("FIT_BROWNIE" ,"FIT" , 150, 25.4, "ABD","KCAL: 365, CARBOHYDRATE: 46.7GR, PROTEIN: 5.67GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("PROFITEROL" ,"REGULAR" , 150, 18.0, "FRANCE","KCAL: 357, CARBOHYDRATE: 53GR, PROTEIN: 5.1GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("COOKIE" ,"REGULAR" , 50, 10.0, "ABD","KCAL: 233, CARBOHYDRATE: 24.5GR, PROTEIN: 3.3GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("CROISSANT" ,"REGULAR" , 100, 15.5, "AUSTRIA","KCAL: 406, CARBOHYDRATE: 46GR, PROTEIN: 7.9GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("CHEESECAKE" ,"REGULAR" , 100, 20.5, "ANCIENT GREEK","KCAL: 321, CARBOHYDRATE: 26.1GR, PROTEIN: 6.1GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("FIT_CHEESECAKE" ,"FIT" , 100, 23.3, "ANCIENT GREEK","KCAL: 300, CARBOHYDRATE: 20.1GR, PROTEIN: 6.5GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("SOUFFLE" ,"REGULAR" , 100, 18.5, "FRANCE","KCAL: 170, CARBOHYDRATE: 9.8GR, PROTEIN: 5.5GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("SUPANGLE" ,"REGULAR" , 130, 18.0, "TURKEY","KCAL: 159, CARBOHYDRATE: 19.1GR, PROTEIN: 5.2GR");
INSERT INTO DESSERTS(PRODUCTNAME,DESSERT_OPTION,PORTION_SIZE_GR,DESSERT_PRICE,ORIGINOF_DESSERT,NUTRITIONAL_VALUES) VALUES("ICECREAM" ,"REGULAR" , 100, 7.0, "CHINA","KCAL: 227, CARBOHYDRATE: 24.5GR, PROTEIN: 4.1GR");
SELECT * FROM DESSERTS; 
DROP TABLE DESSERTS;

-- // BEVERAGES TABLE;
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COFFEE","GRANDE","NULL","NULL",8);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COFFEE","GRANDE","NULL","LACTOSE FREE",15);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COFFEE","SMALL","NULL","LACTOSE FREE",10);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COFFEE","GRANDE","VANİLYA","LACTOSE FREE",18);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COFFEE","GRANDE","KARAMEL","LACTOSE FREE",18);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("SHERBET","STANDARD","STRAWBERRY","NULL",13);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("SHERBET","STANDARD","PEACH","NULL",13);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("TEA","STANDARD","NULL","NULL",5);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("TEA","STANDARD","NULL","LACTOSE FREE",6);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COCKTAIL","STANDARD","MANGO","NULL",23);
INSERT INTO BEVERAGES(PRODUCTNAME,CUP_SIZE,SYRUP_OPTION,MILK_OPTION,BEVERAGE_PRICE) VALUES("COCKTAIL","STANDARD","LEMON","NULL",20);
SELECT * FROM BEVERAGES;
DROP TABLE BEVERAGES;

-- // BASKET TABLE;
INSERT INTO BASKET(BASKETID,TOTAL_PRICE) VALUES(101,50);
INSERT INTO BASKET(BASKETID,TOTAL_PRICE) VALUES(102,70);
INSERT INTO BASKET(BASKETID,TOTAL_PRICE) VALUES(103,120);
INSERT INTO BASKET(BASKETID,TOTAL_PRICE) VALUES(104,65);
INSERT INTO BASKET(BASKETID,TOTAL_PRICE) VALUES(105,90);
INSERT INTO BASKET(BASKETID,TOTAL_PRICE) VALUES(106,120);
SELECT * FROM BASKET;
DROP TABLE BASKET;

-- // PAYMENT TABLE;
INSERT INTO PAYMENT(BASKETID,PAYMENT_TYPE,PAYMENT_PLACE) VALUES(101,"CREDITCARD","PAY_AT_THE_DOOR");
INSERT INTO PAYMENT(BASKETID,PAYMENT_TYPE,PAYMENT_PLACE) VALUES(102,"CREDITCARD","PAY_AT_THE_PATISSERIE");
INSERT INTO PAYMENT(BASKETID,PAYMENT_TYPE,PAYMENT_PLACE) VALUES(103,"CASH","PAY_AT_THE_PATISSERIE");
INSERT INTO PAYMENT(BASKETID,PAYMENT_TYPE,PAYMENT_PLACE) VALUES(104,"CASH","PAY_AT_THE_DOOR");
INSERT INTO PAYMENT(BASKETID,PAYMENT_TYPE,PAYMENT_PLACE) VALUES(105,"CREDITCARD","PAY_AT_THE_DOOR");
INSERT INTO PAYMENT(BASKETID,PAYMENT_TYPE,PAYMENT_PLACE) VALUES(106,"CASH","PAY_AT_THE_DOOR");
SELECT * FROM PAYMENT;
DROP TABLE PAYMENT;

-- //ADDRESS TABLE;
INSERT INTO ADDRESS(ADDRESS_ID,CITY,STATE,STREET_NAME,STREET_NO,APARTMENT_NAME,DOOR_NO) VALUES(9876,"İZMİR","BORNOVA","ERGENE",526,"PALMİYE",10);
INSERT INTO ADDRESS(ADDRESS_ID,CITY,STATE,STREET_NAME,STREET_NO,APARTMENT_NAME,DOOR_NO) VALUES(9877,"İZMİR","BAYRAKLI","KAZIMDİRİK",278,"NURETTİNBEY",9);
INSERT INTO ADDRESS(ADDRESS_ID,CITY,STATE,STREET_NAME,STREET_NO,APARTMENT_NAME,DOOR_NO) VALUES(9875,"İZMİR","BORNOVA","ATATÜRK",3459,"MENEKŞE",3);
INSERT INTO ADDRESS(ADDRESS_ID,CITY,STATE,STREET_NAME,STREET_NO,APARTMENT_NAME,DOOR_NO) VALUES(9762,"İZMİR","ALSANCAK","KIZILAY",1287,"ÖZGÜR",12);
INSERT INTO ADDRESS(ADDRESS_ID,CITY,STATE,STREET_NAME,STREET_NO,APARTMENT_NAME,DOOR_NO) VALUES(9753,"İZMİR","BOSTANLI","İNÖNÜ",2342,"MANOLYA",1);
INSERT INTO ADDRESS(ADDRESS_ID,CITY,STATE,STREET_NAME,STREET_NO,APARTMENT_NAME,DOOR_NO) VALUES(9752,"İZMİR","BORNOVA","ERZENE",186,"ALİPAMUK",13);
SELECT * FROM ADDRESS;
DROP TABLE ADDRESS;

-- // MEMBERS TABLE;
INSERT INTO MEMBERS(BASKETID,ADDRESS_ID,USERNAME,PASSWORD,PHONE_NUMBER,E_MAIL) VALUES(101,9876,"iremfocali",4353,"5553876645","irem.focali@hotmail.com");
INSERT INTO MEMBERS(BASKETID,ADDRESS_ID,USERNAME,PASSWORD,PHONE_NUMBER,E_MAIL) VALUES(102,9877,"serraatalay",2562,"5079665342","serraatalay@hotmail.com");
INSERT INTO MEMBERS(BASKETID,ADDRESS_ID,USERNAME,PASSWORD,PHONE_NUMBER,E_MAIL) VALUES(103,9875,"edaayse",6478,"5324590088","eda_ayse@hotmail.com");
INSERT INTO MEMBERS(BASKETID,ADDRESS_ID,USERNAME,PASSWORD,PHONE_NUMBER,E_MAIL) VALUES(104,9762,"yarensen",23045,"5072572974","yarensen@hotmail.com");
INSERT INTO MEMBERS(BASKETID,ADDRESS_ID,USERNAME,PASSWORD,PHONE_NUMBER,E_MAIL) VALUES(105,9753,"dilayfocali",72819,"5075123498","dilay.focali@hotmail.com");
INSERT INTO MEMBERS(BASKETID,ADDRESS_ID,USERNAME,PASSWORD,PHONE_NUMBER,E_MAIL) VALUES(106,9752,"ilaydatac",1111,"50532234567","ilayda_tac@hotmail.com");
SELECT * FROM MEMBERS;
DROP TABLE MEMBERS;

-- 3. Queries:
-- (15 points)
-- Write 5 queries with explanations 
-- Write 5 queries. Your queries should do a task that is meaningful in your selected context (project topic). 
-- At least one that joins two or more tables 
-- At least one that include group functions 
-- At least one with one or more sub-query(es) 
-- At least one update 
-- At least one delete 
-- At least one include arithmetic functions 
-- At least one uses alias 

-- SHOW AVERAGE AGE AND AVERAGE SALARY OF THE EMPLOYEES WHO HAS MORE THAN 5 YEARS EXPERIENCE
 SELECT AVG(AGE),AVG(SALARY)
 FROM EMPLOYEE AS E,PROFESSIONALPASTRYCHEFS AS PPC
 WHERE E.EMPNO = PPC.EMPNO AND EXPERIENCE > 5;

-- SHOW THE MINIMUM PRICES FOR EACH PORTION IN ASENDING ORDER.
SELECT PRODUCTNAME AS PN ,PORTION_SIZE_GR AS PS_GR, MIN(DESSERT_PRICE) AS D_PRICE
FROM DESSERTS 
GROUP BY PS_GR
ORDER BY D_PRICE;

-- SHOW THE EMPLOYEES WHO EARNS MORE THAN THE MINIMUM SALARY AND HAS THE GENDER OF THE PERSON WHO IS THIRTY.
SELECT FIRSTNAME,LASTNAME,SALARY
FROM EMPLOYEE
WHERE GENDER =
(SELECT GENDER 
FROM EMPLOYEE
WHERE AGE = 30)
AND SALARY >
(SELECT MIN(SALARY)
 FROM EMPLOYEE);

-- ROUND UP THE FIT DESSERT'S PRICES
UPDATE DESSERTS SET DESSERT_PRICE= CEILING(DESSERT_PRICE)
WHERE DESSERT_OPTION = "FIT";

-- DELETE THE MEMBER WHO HAS THE USERNAME OF "ilaydatac".
DELETE FROM MEMBERS WHERE USERNAME IN("ilaydatac"); 







 
